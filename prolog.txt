predecesor([], []).
predecesor([X], [X]).

predecesor([X | Resto], [X | R]) :- predecesor_aux(Resto, X, R).

predecesor_aux([X | Resto], Anterior, [X | R]) :- X >= Anterior, predecesor_aux(Resto, X, R).
predecesor_aux([X | Resto], Anterior, R) :- X < Anterior, predecesor_aux(Resto, Anterior, R).

------------------------------------------------------------------------------------------------------------------------

rotada_aux([], _, []).
rotada(L, 0, L).

rotada([X | Resto], N, Rotada) :- N > 0, append(Resto, [X], Resultado), N1 is N - 1, rotada(Resultado, N1, Rotada).

------------------------------------------------------------------------------------------------------------------------

suma(0,[]).
suma(S, [X | Resto]) :- suma(S1, Resto), S is S1 + X.

------------------------------------------------------------------------------------------------------------------------

cantidad(0, []).
cantidad(N, [_ | Resto]) :- cantidad(N1, Resto), N is N1 + 1.

------------------------------------------------------------------------------------------------------------------------

ultimo(0, []).
ultimo(U, [U]).
ultimo(U, [_|Resto]) :- ultimo(U, Resto).

------------------------------------------------------------------------------------------------------------------------

% Regla para obtener la lista inversa
inversa([], []).
inversa([X], [X]).
inversa([X|Resto], Inversa) :- inversa(Resto, RestoInverso), append(RestoInverso, [X], Inversa).

------------------------------------------------------------------------------------------------------------------------

% Hecho: Eliminar elemento en posición 0
sacar(0, [_ | Resto], Resto).

% Regla: Eliminar elemento en posición P
sacar(P, [X | Resto], [X | R]) :- P > 0, P1 is P - 1, sacar(P1, Resto, R).


------------------------------------------------------------------------------------------------------------------------

% Hecho: Eliminar el elemento específico
eliminar([E | Resto], E, Resto).

% Regla: Eliminar elemento específico
eliminar([X | Resto], E, [X | R]) :- X \= E, eliminar(Resto, E, R).


------------------------------------------------------------------------------------------------------------------------

eliminar_todos([], _, []).

eliminar_todos([E | Resto], E, R) :- eliminar_todos(Resto, E, R).

eliminar_todos([X | Resto], E, [X | R]) :- X \= E, eliminar_todos(Resto, E, R).

------------------------------------------------------------------------------------------------------------------------

% Hecho: La intersección de dos listas vacías es una lista vacía
intersec([], _, []).

% Regla: Si el primer elemento de L1 está en L2, incluirlo en la intersección
intersec([X | Resto1], L2, [X | Resto3]) :- member(X, L2), intersec(Resto1, L2, Resto3).

% Regla: Si el primer elemento de L1 no está en L2, no incluirlo
intersec([X | Resto1], L2, Resto3) :- \+ member(X, L2), intersec(Resto1, L2, Resto3).

% Hecho: La intersección de una lista con una lista vacía es una lista vacía
intersec(_, [], []).

------------------------------------------------------------------------------------------------------------------------

% Caso base: Rotar 0 posiciones, la lista se mantiene igual
rotarIzq(R, 0, R).

% Caso recursivo: Rotar N posiciones a la izquierda
rotarIzq([Primer | Resto], N, R) :-
    N > 0,
    append(Resto, [Primer], NuevaLista),    % Coloca el primer elemento al final
    N1 is N - 1,                            % Decrementa N
    rotarIzq(NuevaLista, N1, R).            % Llama recursivamente con la nueva lista y N-1

------------------------------------------------------------------------------------------------------------------------


% Hecho: Insertar en posición 0 agrega el elemento al principio
insertarEn(E, L, 0, [E | L]).

% Regla: Insertar en una posición P
insertarEn(E, [X | Resto], P, [X | R]) :-
    P > 0,
    P1 is P - 1,
    insertarEn(E, Resto, P1, R).

